<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		activate="viewActivated(event)" creationComplete="viewIntializer(event)" currentState="Home"
		title="Home" viewDeactivate="viewDeactivateHandler(event)">

	
	<fx:Script>
		<![CDATA[
			import Network.*;
			
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;

			private var p:PersistenceManager = new PersistenceManager();
			private var mbConMan:ConnectionManager = new ConnectionManager();
				
			[Embed(source='icons/play.png')]
			private static var playIcon:Class;
			[Embed(source='icons/pause.png')]
			private static var pauseIcon:Class;

			private function connect():void
			{
				mbConMan.connect(p.getProperty("serverAddress").toString(),parseInt(p.getProperty("serverPort").toString()));
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestPreviousTrack();
				mbConMan.requestSongChangedStatus();
			}
			
			protected function playButton_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestPlayPause();
				mbConMan.requestPlayState();
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestNextTrack();
				mbConMan.requestSongChangedStatus();
			}
			
			protected function volUp_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestVolumeIncrease();
			}
			
			protected function volDown_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestVolumeDecrease();
			}
			
			protected function viewIntializer(event:FlexEvent):void
			{
				mbConMan.addEventListener("statusPlaying",statusPlayingHandler);
				mbConMan.addEventListener("statusPaused",statusPausedHandler);
				mbConMan.addEventListener("statusStopped",statusStoppedHandler);
				mbConMan.addEventListener("volumeChanged",volumeChangedHandler);
				mbConMan.addEventListener("newArtistDataAvailable",newArtistDataHandler);
				mbConMan.addEventListener("albumCoverAvailable",albumCoverDataHandler);
			}
			protected function viewActivated(event:Event):void
			{
				connect();
			}

			protected function viewDeactivateHandler(event:ViewNavigatorEvent):void
			{
				mbConMan.disconnect();
			}
			
			protected function checkChange_clickHandler(event:MouseEvent):void
			{
			}
			protected function statusPlayingHandler(event:Event):void{
				playButton.setStyle("icon", pauseIcon);
			}
			
			protected function stopButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				mbConMan.requestSongCover();
			}
			
			protected function statusPausedHandler(event:Event):void
			{
				playButton.setStyle("icon", playIcon);
			}
			
			protected function statusStoppedHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function volumeChangedHandler(event:Event):void
			{
				volumeIndicator.text = mbConMan.getVolume() + "%";
			}
			
			protected function newArtistDataHandler(event:Event):void
			{
				artistName.text = mbConMan.getTrackInfo().artist;
				artistTitle.text = mbConMan.getTrackInfo().title;
				artistAlbum.text = mbConMan.getTrackInfo().album;
				albumYear.text = mbConMan.getTrackInfo().year;
			}
			
			protected function albumCoverDataHandler(event:Event):void
			{
				coverImage.source=mbConMan.getAlbumCover();
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="Home"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<s:Button id="previousButton" x="28" y="268" width="100" height="100"
			  click="previousButton_clickHandler(event)" icon="@Embed('icons/skip_backward.png')"/>
	<s:Button id="playButton" x="136" y="268" width="100" height="100" label="Play/Pause"
			  click="playButton_clickHandler(event)" enabled="true" icon="@Embed('icons/play.png')"/>
	<s:Button id="nextButton" x="352" y="268" width="100" height="100" label="Next"
			  click="nextButton_clickHandler(event)" icon="@Embed('icons/skip_forward.png')"/>
	<s:Button id="volDown" x="386" y="110" width="60" height="60" label="-"
			  click="volDown_clickHandler(event)" icon="@Embed('icons/volume_down.png')"/>
	<s:Button id="volUp" x="386" y="42" width="60" height="60" label="+"
			  click="volUp_clickHandler(event)" icon="@Embed('icons/volume_up.png')"/>
	<s:Label id="volumeIndicator" x="386" y="178" width="66" height="48" fontFamily="Verdana"
			 fontSize="25" text="Vol%" textAlign="center" verticalAlign="middle"/>
	<s:Image id="coverImage" x="115" y="10" width="250" height="250"/>
	<s:Label x="9" y="452" text="Artist:"/>
	<s:Label x="8" y="482" text="Title:"/>
	<s:Label x="9" y="513" text="Album:"/>
	<s:Label x="9" y="544" text="Year:"/>
	<s:Label id="artistName" x="94" y="452" width="376" height="23" fontFamily="Verdana"
			 fontSize="20"/>
	<s:Label id="artistTitle" x="94" y="482" width="375" height="23" fontFamily="Verdana"
			 fontSize="20"/>
	<s:Label id="artistAlbum" x="94" y="513" width="375" height="23" fontFamily="Verdana"
			 fontSize="20"/>
	<s:Label id="albumYear" x="94" y="544" width="375" height="23" fontFamily="Verdana" fontSize="20"/>
	<s:Button id="stopButton" x="244" y="268" width="100" height="100"
			  click="stopButton_clickHandler(event)" icon="@Embed('icons/stop.png')"/>
</s:View>
