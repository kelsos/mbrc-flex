<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:supportClasses="spark.skins.mobile.supportClasses.*"
		viewActivate="viewActivated(event)" creationComplete="viewIntializer(event)" currentState="Home"
		title="Home" viewDeactivate="viewDeactivateHandler(event)"
		actionBarVisible.Home="false" tabBarVisible.Home="true"
		actionBarVisible.Landscape="false">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import Network.*;
			import Network.Protocol.AnswerHandler;
			
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			
			import spark.events.ViewNavigatorEvent;
			
			/*embedded Icons*/
			[Embed(source='assets/MD-play.png')]
			private static var playIcon:Class;
			[Embed(source='assets/MD-pause.png')]
			private static var pauseIcon:Class;
			[Embed(source='assets/MD-shuffle-off.png')]
			private static var shuffleOffIcon:Class;
			[Embed(source='assets/MD-shuffle.png')]
			private static var shuffleIcon:Class;
			[Embed(source='assets/MD-volume-0-alt.png')]
			private static var mutedIcon:Class;
			[Embed(source='assets/MD-volume-3.png')]
			private static var unMutedIcon:Class;
			[Embed(source='assets/MD-repeat-alt.png')]
			private static var repeatIcon:Class;
			[Embed(source='assets/MD-repeat-alt-off.png')]
			private static var repeatOffIcon:Class;
			[Embed(source='assets/lastfm.off.png')]
			private static var scrobblerOffIcon:Class;
			[Embed(source='assets/lastfm.red.png')]
			private static var scrobblerOnIcon:Class;
			
			private var _loader:Loader = new Loader();
			private var _bitmapData:BitmapData;
			
			private function byteArrayToBitmapData(byteArray:ByteArray):void
			{
				_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, getBitmapData);
				_loader.loadBytes(byteArray);
			}
			private function getBitmapData(e:Event):void {
				_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, getBitmapData);
				var content:* = _loader.content;
				_bitmapData = new BitmapData(content.width,content.height,true,0x00000000);
				
				var matrix:Matrix = new Matrix();
				_bitmapData.draw(content, matrix,null,null,null,true);
				coverImage.source = new Bitmap(_bitmapData);
				_bitmapData = null;
			}
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				ConnectionManager.getInstance().requestPreviousTrack();
				ConnectionManager.getInstance().requestSongChangedStatus();
			}
			protected function playButton_clickHandler(event:MouseEvent):void
			{
				ConnectionManager.getInstance().requestPlayPause();
				ConnectionManager.getInstance().requestPlayState();
			}
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				ConnectionManager.getInstance().requestNextTrack();
				ConnectionManager.getInstance().requestSongChangedStatus();
			}
			private function addListeners():void
			{
				AnswerHandler.getInstance().addEventListener("statusPlaying",statusPlayingHandler);
				AnswerHandler.getInstance().addEventListener("statusPaused",statusPausedHandler);
				AnswerHandler.getInstance().addEventListener("statusStopped",statusStoppedHandler);
				AnswerHandler.getInstance().addEventListener("volumeChanged",volumeChangedHandler);
				AnswerHandler.getInstance().addEventListener("newArtistDataAvailable",newArtistDataHandler);
				AnswerHandler.getInstance().addEventListener("albumCoverAvailable",albumCoverDataHandler);
				AnswerHandler.getInstance().addEventListener("ShuffleStatusChanged",shuffleStatusChangeHandler);
				AnswerHandler.getInstance().addEventListener("MuteStatusChanged",muteStatusChangedHandler);
				AnswerHandler.getInstance().addEventListener("repeatStatusChanged",repeatStatusChanged);
				AnswerHandler.getInstance().addEventListener("ScrobblerStatusChanged",scrobblerStatusChangeHandler);
			}
			
			private function removeListeners():void
			{
				AnswerHandler.getInstance().removeEventListener("statusPlaying",statusPlayingHandler);
				AnswerHandler.getInstance().removeEventListener("statusPaused",statusPausedHandler);
				AnswerHandler.getInstance().removeEventListener("statusStopped",statusStoppedHandler);
				AnswerHandler.getInstance().removeEventListener("volumeChanged",volumeChangedHandler);
				AnswerHandler.getInstance().removeEventListener("newArtistDataAvailable",newArtistDataHandler);
				AnswerHandler.getInstance().removeEventListener("albumCoverAvailable",albumCoverDataHandler);
				AnswerHandler.getInstance().removeEventListener("ShuffleStatusChanged",shuffleStatusChangeHandler);
				AnswerHandler.getInstance().removeEventListener("MuteStatusChanged",muteStatusChangedHandler);
				AnswerHandler.getInstance().removeEventListener("repeatStatusChanged",repeatStatusChanged);
				AnswerHandler.getInstance().removeEventListener("ScrobblerStatusChanged",scrobblerStatusChangeHandler);
			}
			protected function viewIntializer(event:FlexEvent):void
			{

			}
			protected function viewActivated(event:Event):void
			{
				addListeners();
				
				ConnectionManager.getInstance().requestMuteState();
				ConnectionManager.getInstance().requestShuffleState();
				ConnectionManager.getInstance().requestRepeatState();
				ConnectionManager.getInstance().requestVolume();
				ConnectionManager.getInstance().requestScrobblerState();
				ConnectionManager.getInstance().requestSongData();
				ConnectionManager.getInstance().requestSongCover();
			}
			protected function viewDeactivateHandler(event:ViewNavigatorEvent):void
			{
				removeListeners();
			}
			protected function checkChange_clickHandler(event:MouseEvent):void
			{
			}
			protected function statusPlayingHandler(event:Event):void
			{
				playButton.setStyle("icon", pauseIcon);
			}
			protected function stopButton_clickHandler(event:MouseEvent):void
			{
				ConnectionManager.getInstance().requestPlaybackTermination();
				ConnectionManager.getInstance().requestPlayState();
			}
			protected function statusPausedHandler(event:Event):void
			{
				playButton.setStyle("icon", playIcon);
			}
			protected function statusStoppedHandler(event:Event):void
			{
				playButton.setStyle("icon", playIcon);
			}
			protected function volumeChangedHandler(event:Event):void
			{
				volumeSlider.value=AnswerHandler.getInstance().getVolume();
			}
			protected function newArtistDataHandler(event:Event):void
			{
				artistName.text = AnswerHandler.getInstance().trackInfo.artist;
				artistTitle.text = AnswerHandler.getInstance().trackInfo.title;
				artistAlbum.text = AnswerHandler.getInstance().trackInfo.album;
				albumYear.text = AnswerHandler.getInstance().trackInfo.year;
			}
			protected function albumCoverDataHandler(event:Event):void
			{
				byteArrayToBitmapData(AnswerHandler.getInstance().getCover());
			}
			protected function buttonRepeat_clickHandler(event:MouseEvent):void
			{
				ConnectionManager.getInstance().requestRepeatState("toggle");
			}
			protected function buttonShuffle_clickHandler(event:MouseEvent):void
			{
				ConnectionManager.getInstance().requestShuffleState("toggle");
			}
			protected function buttonMute_clickHandler(event:MouseEvent):void
			{
				ConnectionManager.getInstance().requestMuteState("toggle")
			}
			protected function shuffleStatusChangeHandler(event:Event):void
			{
				if(AnswerHandler.getInstance().getShuffleStatus())
				{
					buttonShuffle.setStyle("icon", shuffleIcon);
				}
				else
				{
					buttonShuffle.setStyle("icon", shuffleOffIcon);
				}
			}
			protected function muteStatusChangedHandler(event:Event):void
			{
				if(AnswerHandler.getInstance().getMuteStatus())
				{
					buttonMute.setStyle("icon", mutedIcon);
				}
				else
				{
					buttonMute.setStyle("icon",unMutedIcon);
				}
			}
			protected function repeatStatusChanged(event:Event):void
			{
				if(AnswerHandler.getInstance().getRepeatStatus())
				{
					buttonRepeat.setStyle("icon",repeatIcon);	
				}
				else
				{
					buttonRepeat.setStyle("icon",repeatOffIcon);
				}
			}
			
			protected function volumeSliderChangeHandler(event:Event):void
			{
				if(event.type=="change")
				{
					ConnectionManager.getInstance().requestVolume(volumeSlider.value);
				}
			}
			
			protected function playlistButtonClickHandler(event:MouseEvent):void
			{
				this.navigator.pushView(views.mb_remotePlaylistView);
			}
			
			protected function SettingsButtonClickHandler(event:MouseEvent):void
			{
				this.navigator.pushView(views.mb_remoteSettingsView);
			}
			
			protected function scrobbleButtonClickHandler(event:MouseEvent):void
			{
				ConnectionManager.getInstance().requestScrobblerState("toggle");
			}
			
			protected function scrobblerStatusChangeHandler(event:Event):void
			{
				if(AnswerHandler.getInstance().getScrobblerStatus())
				{
					scrobbleButton.setStyle("icon", scrobblerOnIcon );
				}
				else
				{
					scrobbleButton.setStyle("icon", scrobblerOffIcon);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="Home"/>
		<s:State name="Landscape"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Button id="previousButton" width="100" height="100" click="previousButton_clickHandler(event)"
			  x.Home="20" y.Home="564" width.Home="110" height.Home="110"
			  icon.Home="@Embed('assets/MD-previous.png')" styleName.Home="previousButton"
			  x.Landscape="10" y.Landscape="475" icon.Landscape="@Embed('assets/MD-previous.png')"/>
	<s:Button id="playButton" x="130" y="474" width="100" height="100" label="Play/Pause"
			  click="playButton_clickHandler(event)" enabled="true"
			  x.Home="130" y.Home="564" width.Home="110" height.Home="110"
			  icon.Home="@Embed('assets/MD-play.png')" styleName.Home="playButton"
			  icon.Landscape="@Embed('assets/MD-play.png')"/>
	<s:Button id="nextButton" x="370" y="474" width="100" height="100" label="Next"
			  click="nextButton_clickHandler(event)"
			  x.Home="350" y.Home="564" width.Home="110" height.Home="110"
			  icon.Home="@Embed('assets/MD-next.png')" styleName.Home="nextButton"
			  icon.Landscape="@Embed('assets/MD-next.png')"/>
	<s:Label id="volumeIndicator" includeIn="Landscape" x="402" y="198" width="68" height="60"
			 fontFamily="Verdana" fontSize="24" text="Vol%" textAlign="center"
			 verticalAlign="middle"/>
	<s:Image id="coverImage" x="115" y="10" width="250" height="250" scaleMode="letterbox"
			 x.Home="20" y.Home="10" width.Home="300" height.Home="300" smooth.Home="true"
			 source.Home="@Embed('assets/404.png')"/>
	<s:Label id="artistName" x="10" y="299" width="460" height="30"
			 x.Home="20" y.Home="456" width.Home="440" height.Home="23"
			 fontFamily.Landscape="Verdana" fontSize.Landscape="23" textAlign.Landscape="center"/>
	<s:Label id="artistTitle" x="11" y="337" width="459" height="23"
			 x.Home="20" y.Home="424" width.Home="440" height.Home="24"
			 styleName.Home="playingTrack" textDecoration.Home="none"
			 fontFamily.Landscape="Verdana" fontSize.Landscape="23" textAlign.Landscape="center"/>
	<s:Label id="artistAlbum" x="10" y="368" width="460" height="23" fontFamily="Verdana"
			 fontSize="23" textAlign="center"
			 x.Home="20" y.Home="487" width.Home="440" fontFamily.Home="_sans" textAlign.Home="left"/>
	<s:Label id="albumYear" x="11" y="399" width="459" height="23" fontFamily="Verdana" fontSize="23"
			 x.Home="20" y.Home="518" width.Home="440" fontFamily.Home="_sans"
			 textAlign.Landscape="center"/>
	<s:Button id="stopButton" x="250" y="474" width="100" height="100"
			  click="stopButton_clickHandler(event)"
			  x.Home="240" y.Home="564" width.Home="110" height.Home="110"
			  icon.Home="@Embed('assets/MD-stop.png')" styleName.Home="stopButton"
			  icon.Landscape="@Embed('assets/MD-stop.png')"/>
	<s:Button id="buttonRepeat" x="10" y="10" width="60" height="60" label="Repeat"
			  click="buttonRepeat_clickHandler(event)"
			  x.Home="398" y.Home="42" icon.Home="@Embed('assets/MD-repeat-alt.png')"
			  styleName.Home="repeatButton"
			  icon.Landscape="@Embed('assets/MD-repeat-alt.png')"/>
	<s:Button id="buttonMute" x="10" y="200" width="60" height="60" label="Mute"
			  click="buttonMute_clickHandler(event)"
			  x.Home="398" y.Home="222" icon.Home="@Embed('assets/MD-volume-3.png')"
			  styleName.Home="muteButton"
			  icon.Landscape="@Embed('assets/MD-volume-3.png')"/>
	<s:Button id="buttonShuffle" x="10" y="105" width="60" height="60" label="Shuffle"
			  click="buttonShuffle_clickHandler(event)"
			  x.Home="398" y.Home="102" icon.Home="@Embed('assets/MD-shuffle.png')"
			  styleName.Home="ShuffleButton"
			  icon.Landscape="@Embed('assets/MD-shuffle.png')"/>
	<s:Label x="164" y="268" text="Playing Track:"
			 x.Home="20" y.Home="397" styleName.Home="playingTrackLabel"/>
	<s:Label includeIn="Home" x="20" y="315" styleName="playingTrackLabel" text="Volume:"/>
	<s:HSlider id="volumeSlider" includeIn="Home" x="20" y="338" width="440"
			   change="volumeSliderChangeHandler(event)" liveDragging="true" maximum="100"
			   minimum="0" stepSize="1"/>
	<s:Button id="playlistButton" includeIn="Home" x="135" y="682" width="70" height="70"
			  click="playlistButtonClickHandler(event)" icon="assets/list.png"
			  styleName="PlaylistButton"/>
	<s:Button id="libraryButton" includeIn="Home" x="205" y="682" width="70" height="70"
			  styleName="LibraryButton"/>
	<s:Button id="SettingsButton" includeIn="Home" x="275" y="682" width="70" height="70"
			  click="SettingsButtonClickHandler(event)" icon="assets/settings.png"
			  styleName="SettingsButton"/>
	<s:Button id="scrobbleButton" includeIn="Home" x="398" y="162" width="60" height="60"
			  click="scrobbleButtonClickHandler(event)" icon="@Embed('assets/lastfm.off.png')"
			  styleName="ShuffleButton"/>
</s:View>
