<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		creationComplete="viewIntializer(event)" currentState="Home" title="Home" viewDeactivate="viewDeactivateHandler(event)">

	
	<fx:Script>
		<![CDATA[
			import Network.*;
			
			import mx.events.FlexEvent;
			
			import spark.effects.CallAction;
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;
			
			[Embed(source='icons/play.png')]
			public static var playIcon:Class;
			[Embed(source='icons/pause.png')]
			public static var pauseIcon:Class;

			
			private var p:PersistenceManager = new PersistenceManager();
			private var socketMan:SocketManager = new SocketManager();
			
			protected function connectButton_clickHandler(event:MouseEvent):void
			{
				socketMan.connect(p.getProperty("serverAddress").toString(),parseInt(p.getProperty("serverPort").toString()));
			}
			
			protected function disconnectButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				socketMan.disconnect();
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				socketMan.send("PREVIOUS\r\n");
			}
			
			protected function playButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				socketMan.send("PLAYPAUSE\r\n");
				socketMan.send("GETPLAYSTATE\r\n");
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				socketMan.send("NEXT\r\n");
			}
			
			protected function volUp_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				socketMan.send("INCREASEVOL\r\n");
			}
			
			protected function volDown_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				socketMan.send("DECREASEVOL\r\n");	
			}
			
			protected function viewIntializer(event:FlexEvent):void
			{
				socketMan.addEventListener("socketData",socketDataAvailable);	
				//socketMan.send("GETVOL\r\n");
			}

			private function socketDataAvailable(event:Event):void
			{	
			
				
				connectionLogWindow.text+=socketMan.ServerAnswer();
				var volUpPattern:RegExp = /260.VOL.UP:(\d{1,2})/gm;
				var volDownPattern:RegExp =/270.VOL.DOWN:(\d{1,2})/gm;
				var volGetPattern:RegExp = /250.VOL.CUR:(\d{1,2})/gm;
				var playStatePattern:RegExp = /220.PLAY.STATE:([A-Z]{7})\n/gm;
				var removeOK:RegExp = /250.OK\n/gm;
				if(volUpPattern.test(socketMan.ServerAnswer()))
					volumeIndicatorChange(socketMan.ServerAnswer().replace(volUpPattern,'$1'));
				if(volDownPattern.test(socketMan.ServerAnswer()))
					volumeIndicatorChange(socketMan.ServerAnswer().replace(volDownPattern,'$1'));
				if(volGetPattern.test(socketMan.ServerAnswer()))
					volumeIndicatorChange(socketMan.ServerAnswer().replace(volGetPattern,'$1'));
				if(playStatePattern.test(socketMan.ServerAnswer())){
					var playState:String = socketMan.ServerAnswer().replace(playStatePattern,'$1');
					playState=playState.replace(removeOK,"");
					switch(playState){
						case "PLAYING":
							playButton.setStyle("icon", playIcon);
							break;	
						case "PAUSEDD":
							playButton.setStyle("icon", pauseIcon);
							break;
						case "STOPPED":
							playButton.setStyle("icon", playIcon);
							break;
						default:
							break;
					}
				}
				socketMan.AnswerClear();
			}
			private function volumeIndicatorChange(volumeData:String):void
			{
				volumeIndicator.text = (parseInt(volumeData)*10) + "%";
			}
		
			
			protected function viewDeactivateHandler(event:ViewNavigatorEvent):void
			{
				socketMan.disconnect();
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="Home"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<s:Button id="previousButton" x="10" y="10" width="128" height="128"
			  click="previousButton_clickHandler(event)" icon="@Embed('icons/skip_backward.png')"/>
	<s:Button id="playButton" x="176" y="10" width="128" height="128" label="Play/Pause"
			  click="playButton_clickHandler(event)" enabled="true" icon="icons/play.png"/>
	<s:Button id="nextButton" x="342" y="10" width="128" height="128" label="Next"
			  click="nextButton_clickHandler(event)" icon="@Embed('icons/skip_forward.png')"/>
	<s:TextArea id="connectionLogWindow" x="20" y="352" height="231" editable="false"
				fontFamily="Courier New" fontSize="10" textAlign="left"/>
	<s:Label x="20" y="321" text="Connection Log:"/>
	<s:Button id="connectButton" x="20" y="591" width="215" label="Connect"
			  click="connectButton_clickHandler(event)"/>
	<s:Button id="disconnectButton" x="247" y="591" width="215" label="Disconnect"
			  click="disconnectButton_clickHandler(event)"/>
	<s:Button id="volDown" x="82" y="146" width="64" height="64" label="-"
			  click="volDown_clickHandler(event)" icon="@Embed('icons/volume_down.png')"/>
	<s:Button id="volUp" x="10" y="146" width="64" height="64" label="+"
			  click="volUp_clickHandler(event)" icon="@Embed('icons/volume_up.png')"/>
	<s:Label id="volumeIndicator" x="154" y="146" width="81" height="64" fontFamily="Verdana"
			 fontSize="30" text="Label" textAlign="center" verticalAlign="middle"/>
</s:View>
