<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:supportClasses="spark.skins.mobile.supportClasses.*"
		activate="viewActivated(event)" creationComplete="viewIntializer(event)" currentState="Home"
		title="Home" viewDeactivate="viewDeactivateHandler(event)">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import Network.*;
			
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;

			private var p:PersistenceManager = new PersistenceManager();
			private var mbConMan:ConnectionManager = new ConnectionManager();
			
			private var poller:Timer = new Timer(3000,0);
				
			[Embed(source='icons/MD-play.png')]
			private static var playIcon:Class;
			[Embed(source='icons/MD-pause.png')]
			private static var pauseIcon:Class;

			private function connect():void
			{
				mbConMan.connect(p.getProperty("serverAddress").toString(),parseInt(p.getProperty("serverPort").toString()));
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestPreviousTrack();
				mbConMan.requestSongChangedStatus();
			}
			
			protected function playButton_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestPlayPause();
				mbConMan.requestPlayState();
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestNextTrack();
				mbConMan.requestSongChangedStatus();
			}
			
			protected function volUp_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestVolumeIncrease();
			}
			
			protected function volDown_clickHandler(event:MouseEvent):void
			{
				if(!mbConMan.ConnectionAchieved())
					connect();
				mbConMan.requestVolumeDecrease();
			}
			
			protected function viewIntializer(event:FlexEvent):void
			{
				mbConMan.addEventListener("statusPlaying",statusPlayingHandler);
				mbConMan.addEventListener("statusPaused",statusPausedHandler);
				mbConMan.addEventListener("statusStopped",statusStoppedHandler);
				mbConMan.addEventListener("volumeChanged",volumeChangedHandler);
				mbConMan.addEventListener("newArtistDataAvailable",newArtistDataHandler);
				mbConMan.addEventListener("albumCoverAvailable",albumCoverDataHandler);
				poller.addEventListener(TimerEvent.TIMER, songChangePolling);
			}
			protected function viewActivated(event:Event):void
			{
				connect();
				poller.start();
			}

			protected function viewDeactivateHandler(event:ViewNavigatorEvent):void
			{
				mbConMan.disconnect();
			}
			
			protected function checkChange_clickHandler(event:MouseEvent):void
			{
			}
			protected function statusPlayingHandler(event:Event):void{
				playButton.setStyle("icon", pauseIcon);
			}
			
			protected function stopButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				mbConMan.requestPlaybackTermination();
				mbConMan.requestPlayState();
			}
			
			protected function statusPausedHandler(event:Event):void
			{
				playButton.setStyle("icon", playIcon);
			}
			
			protected function statusStoppedHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				playButton.setStyle("icon", playIcon);
				
			}
			
			protected function volumeChangedHandler(event:Event):void
			{
				volumeIndicator.text = mbConMan.getVolume() + "%";
			}
			
			protected function newArtistDataHandler(event:Event):void
			{
				artistName.text = mbConMan.getTrackInfo().artist;
				artistTitle.text = mbConMan.getTrackInfo().title;
				artistAlbum.text = mbConMan.getTrackInfo().album;
				albumYear.text = mbConMan.getTrackInfo().year;
			}
			
			protected function albumCoverDataHandler(event:Event):void
			{
				coverImage.source=mbConMan.getAlbumCover();
			}
			
			protected function songChangePolling(event:TimerEvent):void
			{
				mbConMan.requestSongChangedStatus();
			}
			
			protected function buttonRepeat_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				mbConMan.requestChangeRepeatState();
				
			}
			
			protected function buttonShuffle_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				mbConMan.requestChangeShuffleState();
				
			}
			
			protected function buttonMute_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				mbConMan.requestChangeMuteState()
				
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="Home"/>
		<s:State name="Landscape"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Button id="previousButton" x="10" y="475" width="100" height="100"
			  click="previousButton_clickHandler(event)" icon="@Embed('icons/MD-previous.png')"/>
	<s:Button id="playButton" x="130" y="474" width="100" height="100" label="Play/Pause"
			  click="playButton_clickHandler(event)" enabled="true" icon="@Embed('icons/MD-play.png')"/>
	<s:Button id="nextButton" x="370" y="474" width="100" height="100" label="Next"
			  click="nextButton_clickHandler(event)" icon="@Embed('icons/MD-next.png')"/>
	<s:Button id="volDown" x="410" y="105" width="60" height="60" label="-"
			  click="volDown_clickHandler(event)" icon="@Embed('icons/MD-volume-down.png')"/>
	<s:Button id="volUp" x="410" y="10" width="60" height="60" label="+"
			  click="volUp_clickHandler(event)" icon="@Embed('icons/MD-volume-up.png')"/>
	<s:Label id="volumeIndicator" x="402" y="198" width="68" height="60" fontFamily="Verdana"
			 fontSize="24" text="Vol%" textAlign="center" verticalAlign="middle"/>
	<s:Image id="coverImage" x="115" y="10" width="250" height="250" scaleMode="letterbox"
			 smooth="true" smoothingQuality="high"/>
	<s:Label id="artistName" x="10" y="299" width="460" height="30" fontFamily="Verdana"
			 fontSize="23" textAlign="center"
			 x.Home="10" y.Home="306" height.Home="23" fontFamily.Home="_sans"/>
	<s:Label id="artistTitle" x="11" y="337" width="459" height="23" fontFamily="Verdana"
			 fontSize="23" textAlign="center"
			 fontFamily.Home="_sans"/>
	<s:Label id="artistAlbum" x="10" y="368" width="460" height="23" fontFamily="Verdana"
			 fontSize="23" textAlign="center"
			 fontFamily.Home="_sans"/>
	<s:Label id="albumYear" x="11" y="399" width="459" height="23" fontFamily="Verdana" fontSize="23"
			 textAlign="center"
			 fontFamily.Home="_sans"/>
	<s:Button id="stopButton" x="250" y="474" width="100" height="100"
			  click="stopButton_clickHandler(event)" icon="@Embed('icons/MD-stop.png')"/>
	<s:Button id="buttonRepeat" x="10" y="10" width="60" height="60" label="Repeat"
			  click="buttonRepeat_clickHandler(event)" icon="@Embed('icons/MD-repeat-alt.png')"/>
	<s:Button id="buttonMute" x="10" y="200" width="60" height="60" label="Mute"
			  click="buttonMute_clickHandler(event)" icon="@Embed('icons/MD-volume-3.png')"/>
	<s:Button id="buttonShuffle" x="10" y="105" width="60" height="60" label="Shuffle"
			  click="buttonShuffle_clickHandler(event)" icon="@Embed('icons/MD-shuffle.png')"/>
	<s:Label x="164" y="268" text="Playing Track:"
			 x.Home="164" y.Home="268" fontFamily.Home="Arial"/>
</s:View>
